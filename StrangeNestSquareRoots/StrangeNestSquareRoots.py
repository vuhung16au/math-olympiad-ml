#!/usr/bin/env python3
"""
Simulate the density of the sequence generated by the recurrence relation:
    x_{k+1} = 2x_k * sqrt(1 - x_k^2)
with initial condition x_0 in [0, 1].

The script computes the empirical density and compares it with the theoretical
invariant measure: p(x) = 2/(pi * sqrt(1 - x^2))
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import sys

def generate_sequence(x0, n_iterations):
    """
    Generate a sequence using the recurrence relation:
        x_{k+1} = 2x_k * sqrt(1 - x_k^2)
    
    Parameters:
    -----------
    x0 : float
        Initial condition in [0, 1]
    n_iterations : int
        Number of iterations
    
    Returns:
    --------
    sequence : numpy array
        The generated sequence
    """
    sequence = np.zeros(n_iterations + 1)
    sequence[0] = x0
    
    for k in range(n_iterations):
        x_k = sequence[k]
        # Ensure we don't get NaN values due to numerical errors
        if x_k < 0:
            x_k = 0
        elif x_k > 1:
            x_k = 1
        
        sequence[k + 1] = 2 * x_k * np.sqrt(1 - x_k**2)
    
    return sequence

def theoretical_density(x):
    """
    Compute the theoretical invariant density:
        p(x) = 2/(pi * sqrt(1 - x^2))
    
    Parameters:
    -----------
    x : array-like
        Points at which to evaluate the density
    
    Returns:
    --------
    density : numpy array
        The theoretical density values
    """
    return 2 / (np.pi * np.sqrt(1 - x**2))

def compute_empirical_density(sequence, n_bins=100):
    """
    Compute the empirical density (histogram) of the sequence.
    
    Parameters:
    -----------
    sequence : numpy array
        The sequence values
    n_bins : int
        Number of bins for the histogram
    
    Returns:
    --------
    bin_centers : numpy array
        Center of each bin
    empirical_density : numpy array
        Empirical density values (normalized)
    """
    # Filter out any NaN or invalid values
    valid_sequence = sequence[np.isfinite(sequence)]
    
    # Compute histogram
    counts, bin_edges = np.histogram(valid_sequence, bins=n_bins, range=(0, 1), density=True)
    
    # Compute bin centers
    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2
    
    return bin_centers, counts

def main():
    # Parameters
    x0 = 3/4  # Initial condition
    n_iterations = 100000  # Number of iterations
    n_bins = 100  # Number of bins for histogram
    
    # Output directory
    output_dir = "./data"
    os.makedirs(output_dir, exist_ok=True)
    
    # Output file (using density* naming convention)
    # Note: Using density_0.75.txt based on x0 = 3/4
    output_file = os.path.join(output_dir, "density_0.75.txt")
    
    print(f"Generating sequence with x_0 = {x0} for {n_iterations} iterations...")
    
    # Generate sequence
    sequence = generate_sequence(x0, n_iterations)
    
    print(f"Sequence generated. Statistics:")
    print(f"  Min: {np.min(sequence):.6f}")
    print(f"  Max: {np.max(sequence):.6f}")
    print(f"  Mean: {np.mean(sequence):.6f}")
    print(f"  Valid values: {np.sum(np.isfinite(sequence))}/{len(sequence)}")
    
    # Compute empirical density
    print(f"\nComputing empirical density with {n_bins} bins...")
    bin_centers, empirical_density = compute_empirical_density(sequence, n_bins)
    
    # Compute theoretical density
    theoretical = theoretical_density(bin_centers)
    
    # Save to file
    print(f"\nSaving results to {output_file}...")
    with open(output_file, 'w') as f:
        f.write("# Density of the sequence x_{k+1} = 2x_k * sqrt(1 - x_k^2)\n")
        f.write(f"# Initial condition: x_0 = {x0}\n")
        f.write(f"# Number of iterations: {n_iterations}\n")
        f.write(f"# Number of bins: {n_bins}\n")
        f.write("#\n")
        f.write("# Column 1: x (bin center)\n")
        f.write("# Column 2: Empirical density\n")
        f.write("# Column 3: Theoretical density\n")
        f.write("#\n")
        for x, emp, theo in zip(bin_centers, empirical_density, theoretical):
            f.write(f"{x:.8f} {emp:.8f} {theo:.8f}\n")
    
    print(f"Results saved to {output_file}")
    
    # Create plot
    print("\nCreating density plot...")
    plt.figure(figsize=(10, 6))
    plt.plot(bin_centers, empirical_density, 'b-', linewidth=2, label='Empirical density', alpha=0.7)
    plt.plot(bin_centers, theoretical, 'r--', linewidth=2, label='Theoretical density: $\\frac{2}{\\pi\\sqrt{1-x^2}}$', alpha=0.8)
    plt.xlabel('x', fontsize=12)
    plt.ylabel('Density', fontsize=12)
    plt.title(f'Density of Sequence: $x_{{k+1}} = 2x_k\\sqrt{{1-x_k^2}}$ with $x_0 = {x0}$', fontsize=14)
    plt.legend(fontsize=11)
    plt.grid(True, alpha=0.3)
    plt.xlim(0, 1)
    plt.ylim(0, max(np.max(empirical_density), np.max(theoretical)) * 1.1)
    
    # Save plot
    plot_file = os.path.join(output_dir, "density_0.75.png")
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    print(f"Plot saved to {plot_file}")
    
    # Also save as PDF for LaTeX
    plot_pdf = os.path.join(output_dir, "density_0.75.pdf")
    plt.savefig(plot_pdf, bbox_inches='tight')
    print(f"Plot saved to {plot_pdf}")
    
    plt.close()
    
    print("\nDone!")

if __name__ == "__main__":
    main()

